{"version":3,"sources":["Components/Services/services.js","Components/Reviews/ReviewList.js","Components/NotFoundView/NotFoundView.js","Components/Reviews/Reviews.js"],"names":["API_KEY","URL","firstFetch","fetch","then","res","json","catch","error","console","log","fetchByMovieTitle","title","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","ReviewList","reviews","map","details","author","content","NotFoundView","Review","state","status","dispatch","isFirstRender","useRef","params","useParams","useEffect","current","type","payload","movieId","review","results"],"mappings":"qJAAA,8KAAMA,EAAU,mCACVC,EAAM,gCAENC,EAAa,WACf,OAAQC,MAAM,GAAD,OAAIF,EAAJ,oCAAmCD,EAAnC,oBACRI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAG9BG,EAAoB,SAACC,GACvB,OACIT,MAAM,GAAD,OAAIF,EAAJ,gCAA+BD,EAA/B,kBAAgDY,IAChDR,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAGlCK,EAAiB,SAACC,GACpB,OACIX,MAAM,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,oBAA8Bd,IAC9BI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAIlCO,EAAiB,SAACD,GACpB,OACIX,MAAM,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,4BAAsCd,IACtCI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAIlCQ,EAAoB,SAACF,GACvB,OACIX,MAAM,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,4BAAsCd,IACtCI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,wECtBzBS,EAZI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClB,OACI,6BACKA,EAAQC,KAAI,SAAAC,GACT,OAAO,+BACH,6BAAKA,EAAQC,SACb,4BAAID,EAAQE,YAFAF,EAAQN,UCAzBS,EANM,WACjB,OACI,0ECgCOC,UA1BA,SAAC,GAA0C,IAAD,IAAxCC,MAAQP,EAAgC,EAAhCA,QAASQ,EAAuB,EAAvBA,OAASC,EAAc,EAAdA,SAEjCC,EAAgBC,kBAAO,GACvBC,EAASC,cAef,OAbAC,qBAAU,WACN,GAAIJ,EAAcK,QAQd,OAPAN,EAAS,CAACO,KAAK,YAAaC,QAAS,YACrCnB,YAAkBc,EAAOM,SACpBhC,MAAK,SAAAiC,GACFV,EAAS,CAACO,KAAM,aAAcC,QAASE,EAAOC,UAC9CX,EAAS,CAACO,KAAK,YAAaC,QAAS,gBACtC5B,OAAM,SAAAC,GAAWC,QAAQC,IAAIF,WACpCoB,EAAcK,SAAU,MAKjB,SAAXP,GAAgC,YAAXA,EACb,2CAEG,aAAXA,EACQR,EAAQ,GAAK,cAAC,EAAD,CAAYA,QAASA,IAAc,cAAC,EAAD,SAD5D","file":"static/js/Reviews.4ed37352.chunk.js","sourcesContent":["const API_KEY = '6e769984a853ea1bdeede26e9a1ea504'\r\nconst URL = 'https://api.themoviedb.org/3/'\r\n\r\nconst firstFetch = () => {\r\n    return (fetch(`${URL}trending/all/day?api_key=${API_KEY}&language=en-US`)\r\n        .then(res => res.json())\r\n        .catch(error => console.log(error))\r\n    );\r\n};\r\nconst fetchByMovieTitle = (title) => {\r\n    return (\r\n        fetch(`${URL}search/movie?api_key=${API_KEY}&query=${title}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\nconst fetchMovieById = (id) => {\r\n    return (\r\n        fetch(`${URL}movie/${id}?api_key=${API_KEY}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\n\r\nconst fetchMovieCast = (id) => {\r\n    return (\r\n        fetch(`${URL}movie/${id}/credits?api_key=${API_KEY}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\n\r\nconst fetchMovieReviews = (id) => {\r\n    return (\r\n        fetch(`${URL}movie/${id}/reviews?api_key=${API_KEY}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\n\r\nexport {\r\n    firstFetch,\r\n    fetchByMovieTitle,\r\n    fetchMovieById,\r\n    fetchMovieCast,\r\n    fetchMovieReviews\r\n};","import PropTypes from 'prop-types'\r\n\r\nconst ReviewList = ({ reviews }) => {\r\n    return (\r\n        <ul>\r\n            {reviews.map(details => {\r\n                return <li key={details.id}>\r\n                    <h3>{details.author}</h3>\r\n                    <p>{details.content}</p>\r\n                </li>\r\n            })}\r\n        </ul>);\r\n};\r\n\r\nexport default ReviewList;\r\n\r\nReviewList.propTypes = {\r\n    reviews: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        author: PropTypes.string.isRequired,\r\n        content: PropTypes.string.isRequired,\r\n    })).isRequired,\r\n};","const NotFoundView = () => {\r\n    return (\r\n        <p>We don't have any reviews for this movie</p>\r\n    );\r\n};\r\n\r\nexport default NotFoundView","import PropTypes from 'prop-types'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useEffect, useRef } from 'react'\r\nimport { fetchMovieReviews } from '../Services/services'\r\nimport ReviewList from \"./ReviewList\"\r\nimport NotFoundView from \"../NotFoundView/NotFoundView\"\r\n\r\n\r\nconst Review = ({state: {reviews, status}, dispatch}) => {\r\n\r\n    const isFirstRender = useRef(true);\r\n    const params = useParams();\r\n    \r\n    useEffect(() => {\r\n        if (isFirstRender.current) {\r\n            dispatch({type:'setStatus', payload: 'pending'})\r\n            fetchMovieReviews(params.movieId)\r\n                .then(review => {\r\n                    dispatch({type: 'setReviews', payload: review.results})\r\n                    dispatch({type:'setStatus', payload: 'resolved'})\r\n                }).catch(error => { console.log(error) });\r\n            isFirstRender.current = false\r\n            return\r\n        };\r\n    })\r\n\r\n    if (status === 'idle' || status === 'pending') {\r\n        return (<p>Loading...</p>)\r\n    };\r\n    if (status === 'resolved') {\r\n        return (reviews[0] ? <ReviewList reviews={reviews} /> : <NotFoundView />)\r\n    };\r\n}\r\n\r\nexport default Review\r\n\r\nReview.propTypes = {\r\n    state: PropTypes.shape({\r\n        status: PropTypes.string.isRequired,\r\n        reviews: PropTypes.arrayOf(PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            author: PropTypes.string.isRequired,\r\n            content: PropTypes.string.isRequired,\r\n        })).isRequired\r\n    }),\r\n    dispatch: PropTypes.func.isRequired,\r\n};"],"sourceRoot":""}