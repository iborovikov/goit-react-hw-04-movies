{"version":3,"sources":["Components/Services/services.js","Components/MoviesPage/MoviesPageForm.js","Components/MoviesPage/MoviesList.js","Components/MoviesPage/MoviesPage.js"],"names":["API_KEY","URL","firstFetch","fetch","then","res","json","catch","error","console","log","fetchByMovieTitle","title","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","MoviesPageForm","onSubmit","inputText","handleInputChange","type","value","onChange","MoviesList","movieList","map","film","to","MoviesPage","state","status","dispatch","useState","setInputText","movieTitle","setMovieTitle","isFirstRender","useRef","useEffect","current","payload","movie","results","e","preventDefault","target"],"mappings":"qJAAA,8KAAMA,EAAU,mCACVC,EAAM,gCAENC,EAAa,WACf,OAAQC,MAAM,GAAD,OAAIF,EAAJ,oCAAmCD,EAAnC,oBACRI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAG9BG,EAAoB,SAACC,GACvB,OACIT,MAAM,GAAD,OAAIF,EAAJ,gCAA+BD,EAA/B,kBAAgDY,IAChDR,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAGlCK,EAAiB,SAACC,GACpB,OACIX,MAAM,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,oBAA8Bd,IAC9BI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAIlCO,EAAiB,SAACD,GACpB,OACIX,MAAM,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,4BAAsCd,IACtCI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAIlCQ,EAAoB,SAACF,GACvB,OACIX,MAAM,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,4BAAsCd,IACtCI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,yEC1BzBS,EARQ,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,kBAC3C,OACI,uBAAMF,SAAUA,EAAhB,UACI,uBAAOG,KAAK,OAAOC,MAAOH,EAAWI,SAAUH,IAC/C,wBAAQC,KAAK,SAAb,wB,OCMGG,EATI,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAClB,OACI,6BACKA,EAAUC,KAAI,SAAAC,GACX,OAAQ,6BAAkB,cAAC,IAAD,CAAMC,GAAE,iBAAYD,EAAKb,IAAzB,SAAgCa,EAAKf,SAA9Ce,EAAKb,UCoDvBe,UArDI,SAAC,GAAgD,IAAD,IAA7CC,MAASC,EAAoC,EAApCA,OAAQN,EAA4B,EAA5BA,UAAaO,EAAe,EAAfA,SAEhD,EAAkCC,mBAAS,IAA3C,mBAAOd,EAAP,KAAkBe,EAAlB,KACA,EAAoCD,mBAAS,IAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KAEMC,EAAgBC,kBAAO,GAE7BC,qBAAU,WACFF,EAAcG,QACdH,EAAcG,SAAU,GAG5BR,EAAS,CAAEX,KAAM,YAAaoB,QAAS,YACvC9B,YAAkBwB,GAAY/B,MAAK,SAAAsC,GAC/BV,EAAS,CAAEX,KAAM,eAAgBoB,QAASC,EAAMC,UAChDX,EAAS,CAAEX,KAAM,YAAaoB,QAAS,gBAEtClC,OAAM,SAAAC,GACHwB,EAAS,CAAEX,KAAM,YAAaoB,QAAS,aACvChC,QAAQC,IAAIF,SAGrB,CAAC2B,EAAYH,IAEhB,IAAMd,EAAW,SAAC0B,GACdA,EAAEC,iBACFT,EAAcjB,IAGZC,EAAoB,SAACwB,GACvBV,EAAaU,EAAEE,OAAOxB,QAG1B,MAAe,SAAXS,EAEI,cAAC,EAAD,CAAgBb,SAAUA,EAAUE,kBAAmBA,EAAmBD,UAAWA,IAG9E,YAAXY,EACO,2CAEI,aAAXA,EAEI,qCACI,cAAC,EAAD,CAAgBb,SAAUA,EAAUE,kBAAmBA,EAAmBD,UAAWA,IACrF,cAAC,EAAD,CAAYM,UAAWA,YAJnC","file":"static/js/MoviesPage.4ca97626.chunk.js","sourcesContent":["const API_KEY = '6e769984a853ea1bdeede26e9a1ea504'\r\nconst URL = 'https://api.themoviedb.org/3/'\r\n\r\nconst firstFetch = () => {\r\n    return (fetch(`${URL}trending/all/day?api_key=${API_KEY}&language=en-US`)\r\n        .then(res => res.json())\r\n        .catch(error => console.log(error))\r\n    );\r\n};\r\nconst fetchByMovieTitle = (title) => {\r\n    return (\r\n        fetch(`${URL}search/movie?api_key=${API_KEY}&query=${title}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\nconst fetchMovieById = (id) => {\r\n    return (\r\n        fetch(`${URL}movie/${id}?api_key=${API_KEY}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\n\r\nconst fetchMovieCast = (id) => {\r\n    return (\r\n        fetch(`${URL}movie/${id}/credits?api_key=${API_KEY}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\n\r\nconst fetchMovieReviews = (id) => {\r\n    return (\r\n        fetch(`${URL}movie/${id}/reviews?api_key=${API_KEY}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\n\r\nexport {\r\n    firstFetch,\r\n    fetchByMovieTitle,\r\n    fetchMovieById,\r\n    fetchMovieCast,\r\n    fetchMovieReviews\r\n};","import PropTypes from 'prop-types'\r\n\r\nconst MoviesPageForm = ({ onSubmit, inputText, handleInputChange }) => {\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <input type=\"text\" value={inputText} onChange={handleInputChange}></input>\r\n            <button type=\"submit\">Search</button>\r\n        </form>\r\n    );\r\n};\r\nexport default MoviesPageForm\r\n\r\nMoviesPageForm.propTypes = {\r\n    inputText: PropTypes.string.isRequired,\r\n    onSubmit: PropTypes.func.isRequired,\r\n    handleInputChange: PropTypes.func.isRequired,\r\n};","import PropTypes from 'prop-types'\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst MoviesList = ({ movieList }) => {\r\n    return (\r\n        <ul>\r\n            {movieList.map(film => {\r\n                return (<li key={film.id}><Link to={`movies/${film.id}`}>{film.title}</Link></li>)\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\nexport default MoviesList\r\n\r\nMoviesList.propTypes = {\r\n    movieList: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n    })).isRequired\r\n};\r\n","import PropTypes from 'prop-types'\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport { fetchByMovieTitle } from \"../Services/services\"\r\nimport MoviesPageForm from './MoviesPageForm'\r\nimport MoviesList from './MoviesList'\r\n\r\nconst MoviesPage = ({ state: { status, movieList }, dispatch }) => {\r\n\r\n    const [inputText, setInputText] = useState('');\r\n    const [movieTitle, setMovieTitle] = useState('');\r\n    \r\n    const isFirstRender = useRef(true);\r\n\r\n    useEffect(() => {\r\n        if (isFirstRender.current) {\r\n            isFirstRender.current = false\r\n            return\r\n        };\r\n        dispatch({ type: 'setStatus', payload: 'pending' });\r\n        fetchByMovieTitle(movieTitle).then(movie => {\r\n            dispatch({ type: 'setMovieList', payload: movie.results });\r\n            dispatch({ type: 'setStatus', payload: 'resolved' });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: 'setStatus', payload: 'rejected' });\r\n                console.log(error)\r\n            });\r\n        \r\n    }, [movieTitle, dispatch]);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        setMovieTitle(inputText);\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputText(e.target.value);\r\n    };\r\n\r\n    if (status === 'idle') {\r\n        return (\r\n            <MoviesPageForm onSubmit={onSubmit} handleInputChange={handleInputChange} inputText={inputText} />\r\n        );\r\n    };\r\n    if (status === 'pending') {\r\n        return <p>Loading...</p>\r\n    };\r\n    if (status === 'resolved') {\r\n        return (\r\n            <>\r\n                <MoviesPageForm onSubmit={onSubmit} handleInputChange={handleInputChange} inputText={inputText} />\r\n                <MoviesList movieList={movieList} />\r\n            </>\r\n        );\r\n    };\r\n    if (status === 'rejected') {\r\n        <h2>Ничего не найдено :( </h2>\r\n    };\r\n};\r\nexport default MoviesPage\r\n\r\nMoviesPage.propTypes = {\r\n    state: PropTypes.shape({\r\n        status: PropTypes.string.isRequired,\r\n        movieList: PropTypes.arrayOf(PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n        })).isRequired\r\n    }),\r\n    dispatch: PropTypes.func.isRequired,\r\n};"],"sourceRoot":""}