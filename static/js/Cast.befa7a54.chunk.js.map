{"version":3,"sources":["Components/Services/services.js","Components/Cast/Cast.js"],"names":["API_KEY","URL","firstFetch","fetch","then","res","json","catch","error","console","log","fetchByMovieTitle","title","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","Cast","state","cast","dispatch","status","isFirstRender","useRef","params","useParams","useEffect","current","type","payload","movieId","movie","map","details","character","name","profile_path","src","alt"],"mappings":"qJAAA,8KAAMA,EAAU,mCACVC,EAAM,gCAENC,EAAa,WACf,OAAQC,MAAM,GAAD,OAAIF,EAAJ,oCAAmCD,EAAnC,oBACRI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAG9BG,EAAoB,SAACC,GACvB,OACIT,MAAM,GAAD,OAAIF,EAAJ,gCAA+BD,EAA/B,kBAAgDY,IAChDR,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAGlCK,EAAiB,SAACC,GACpB,OACIX,MAAM,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,oBAA8Bd,IAC9BI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAIlCO,EAAiB,SAACD,GACpB,OACIX,MAAM,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,4BAAsCd,IACtCI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAIlCQ,EAAoB,SAACF,GACvB,OACIX,MAAM,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,4BAAsCd,IACtCI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,gCCnCxC,wCAsCeS,UAlCF,SAAC,GAA2C,IAAD,IAAxCC,MAASC,EAA+B,EAA/BA,KAAgBC,GAAe,EAAzBC,OAAyB,EAAfD,UAE/BE,EAAgBC,kBAAO,GACvBC,EAASC,cAgBf,OAbAC,qBAAU,WACN,GAAIJ,EAAcK,QAQd,OAPAP,EAAS,CAAEQ,KAAM,YAAaC,QAAS,YACvCd,YAAeS,EAAOM,SACjB1B,MAAK,SAAA2B,GACFX,EAAS,CAAEQ,KAAM,UAAWC,QAASE,EAAMZ,OAC3CC,EAAS,CAAEQ,KAAM,YAAaC,QAAS,gBACxCtB,OAAM,SAAAC,GAAWC,QAAQC,IAAIF,WACpCc,EAAcK,SAAU,MAM5B,6BACKR,EAAKa,KAAI,SAAAC,GACN,OAAO,+BACH,+BAAKA,EAAQC,UAAb,KAA0BD,EAAQE,QACjCF,EAAQG,aACL,qBAAKC,IAAG,yCAAoCJ,EAAQG,aAA5C,6CAAqGE,IAAG,UAAKL,EAAQE,QAC7H,qBAAKE,IAAI,+EAA+EC,IAAG,UAAKL,EAAQE,UAJhGF,EAAQnB","file":"static/js/Cast.befa7a54.chunk.js","sourcesContent":["const API_KEY = '6e769984a853ea1bdeede26e9a1ea504'\r\nconst URL = 'https://api.themoviedb.org/3/'\r\n\r\nconst firstFetch = () => {\r\n    return (fetch(`${URL}trending/all/day?api_key=${API_KEY}&language=en-US`)\r\n        .then(res => res.json())\r\n        .catch(error => console.log(error))\r\n    );\r\n};\r\nconst fetchByMovieTitle = (title) => {\r\n    return (\r\n        fetch(`${URL}search/movie?api_key=${API_KEY}&query=${title}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\nconst fetchMovieById = (id) => {\r\n    return (\r\n        fetch(`${URL}movie/${id}?api_key=${API_KEY}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\n\r\nconst fetchMovieCast = (id) => {\r\n    return (\r\n        fetch(`${URL}movie/${id}/credits?api_key=${API_KEY}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\n\r\nconst fetchMovieReviews = (id) => {\r\n    return (\r\n        fetch(`${URL}movie/${id}/reviews?api_key=${API_KEY}`)\r\n            .then(res => res.json())\r\n            .catch(error => console.log(error))\r\n    );\r\n};\r\n\r\nexport {\r\n    firstFetch,\r\n    fetchByMovieTitle,\r\n    fetchMovieById,\r\n    fetchMovieCast,\r\n    fetchMovieReviews\r\n};","import PropTypes from 'prop-types';\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useEffect, useRef } from 'react';\r\nimport { fetchMovieCast } from '../Services/services'\r\n\r\nconst Cast = ({ state: { cast, status }, dispatch }) => {\r\n\r\n    const isFirstRender = useRef(true);\r\n    const params = useParams();\r\n\r\n    \r\n    useEffect(() => {\r\n        if (isFirstRender.current) {\r\n            dispatch({ type: 'setStatus', payload: 'pending' })\r\n            fetchMovieCast(params.movieId)\r\n                .then(movie => {\r\n                    dispatch({ type: 'setCast', payload: movie.cast })\r\n                    dispatch({ type: 'setStatus', payload: 'resolved' })\r\n                }).catch(error => { console.log(error) });\r\n            isFirstRender.current = false\r\n            return\r\n        };\r\n    });\r\n\r\n    return (\r\n        <ul>\r\n            {cast.map(details => {\r\n                return <li key={details.id}>\r\n                    <h4>{details.character}: {details.name}</h4>\r\n                    {details.profile_path ?\r\n                        <img src={`https://image.tmdb.org/t/p/w300${details.profile_path}?api_key=6e769984a853ea1bdeede26e9a1ea504`} alt={`${details.name}`} /> :\r\n                        <img src=\"http://valser-ukraine.com.ua/wp-content/uploads/2019/10/net-foto-300x300.png\" alt={`${details.name}`} />\r\n                    }\r\n                </li>\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default Cast;\r\n\r\nCast.propTypes = {\r\n    state: PropTypes.shape({\r\n        cast: PropTypes.arrayOf(PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            character: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            profile_path: PropTypes.string,\r\n        })),\r\n        status: PropTypes.string.isRequired\r\n    }).isRequired,\r\n    dispatch: PropTypes.func.isRequired,\r\n}"],"sourceRoot":""}